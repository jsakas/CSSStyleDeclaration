'use strict';

/*
 * W3C provides JSON list of all CSS properties and their status in the standard
 *
 * documentation: https://www.w3.org/Style/CSS/all-properties.en.html
 * JSON url: ( https://www.w3.org/Style/CSS/all-properties.en.json )
 *
 * Download that file, filter out duplicates and filter the properties based on the wanted standard level
 *
 * ED   - Editors' Draft (not a W3C Technical Report)
 * FPWD - First Public Working Draft
 * WD   - Working Draft
 * LC   - Last Call Working Draft
 * CR   - Candidate Recommendation
 * PR   - Proposed Recommendation
 * REC  - Recommendation
 * NOTE - Working Group Note
 */

const fs = require('fs');
const https = require('https');
const path = require('path');

const url = 'https://www.w3.org/Style/CSS/all-properties.en.json';
const outputFilePath = path.resolve(__dirname, './../lib/allProperties.js');

console.log('Downloading CSS properties...');

const request = https.request(url, response => {
  const { statusCode, statusMessage } = response;
  if (statusCode !== 200) {
    if (statusCode < 400) {
      console.log(statusMessage);
    }
    if (statusCode > 400) {
      console.error(statusMessage);
    }
  }
  let body = '';
  response.on('data', chunk => (body += chunk));
  response.on('end', () => {
    const properties = [];

    JSON.parse(body).forEach(({ property, status }) => {
      if (
        // Filter out all properties newer than Working Draft
        status !== 'ED' &&
        status !== 'FPWD' &&
        property !== '--*' &&
        // Properties are often in multiple specifications
        !properties.includes(property)
      ) {
        properties.push(property);
      }
    });

    const stream = fs.createWriteStream(outputFilePath);

    stream.write(
      `'use strict';\n\n// autogenerated by scripts/download_latest_properties.js - ${new Date().toISOString()}\n\n`
    );
    stream.write('/*\n *\n * https://www.w3.org/Style/CSS/all-properties.en.html\n */\n');
    stream.write(`module.exports = new Set(${JSON.stringify(properties, null, 2)});\n`);
    stream.end(err => {
      if (err) {
        throw err;
      }
      console.log(`Generated ${Object.keys(properties).length} properties.`);
    });
  });
});
request.on('error', err => {
  console.error('Error while downloading CSS properties');
  console.error(err);
});
request.end();
